#!/usr/bin/env node

var fs = require("fs")
var path = require("path")

var colors = require("colors")
var program = require("commander")

var cssnext = require("..")
var pkg = require("../package")

program
  .version(pkg.version)
  .usage("[options] [<input> [<output>]]")
  .option("-c, --compress", "compress output")
  .option("-v, --verbose", "verbose output")

// register features as flag
var format = require("util").format
var toSlug = require("to-slug-case")
var toSpace = require("to-space-case")
Object.keys(cssnext.features).forEach(function(feature) {
  var flag = format("--no-%s", toSlug(feature))
  var desc = format("disable %s support", toSpace(feature))
  program.option(flag, desc)
})

program.parse(process.argv)

var input = program.args[0] ? path.resolve(program.args[0]) : null
var output = program.args[1] ? path.resolve(program.args[1]) : null
var verbose = program.verbose

if (input && !fs.existsSync(input)) {
  console.error(colors.red("Unable to read file"), input)
  process.exit(1)
}

function transform() {
  require("read-file-stdin")(input, function(err, buffer) {
    if (err) {
      throw err
    }

    try {
      var css = cssnext(buffer.toString(), {
        features: program,
        from: input,
        sourcemap: Boolean(program.sourcemap),
        compress: program.compress
      })

      require("write-file-stdout")(output, css)
      if (verbose && output) {
        log(colors.cyan("Output written"), output)
      }
    }
    catch (e) {
      console.error()
      console.error()
      console.error(colors.bold("cssnext encounters an error:"))
      console.error()
      console.error(e.message.red)
      console.error()
      console.error(e.stack.split("\n").slice(1).join("\n").grey)
      console.error()
      console.error("If this error looks like a bug, please report it here:")
      console.error(colors.grey("‚ùØ ") + pkg.bugs.url.cyan)
      console.error()
      process.exit(2)
    }
  })
}

transform()

/**
 * log content prefixed by time
 *
 * @return {String} output all given parameters prefixed by the current locale time
 */
function log() {
  var args = [].slice.call(arguments)
  args.unshift("[" + colors.grey(new Date().toLocaleTimeString()) + "]")
  console.log.apply(console.log, args)
}
